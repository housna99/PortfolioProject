use db_clean;

select count(*) from owners2;
select * from owners2;
-- we use inner join with the same table to fill in the property address
-- 1/first of all :
Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress -- ,IFNULL(a.PropertyAddress,b.PropertyAddress)
From owners2 a
JOIN owners2 b
	on a.ParcelID = b.ParcelID
	AND a.UniqueID  <> b.UniqueID 
Where a.PropertyAddress is null;
-- 2/Then :
-- to update we should be careful 
SET SQL_SAFE_UPDATES = 0;
Update  owners2 a
JOIN owners2 b
	on a.ParcelID = b.ParcelID
	AND a.UniqueID  <> b.UniqueID 

SET a.PropertyAddress = IFNULL(a.PropertyAddress,b.PropertyAddress)
Where a.PropertyAddress is null
;
SET SQL_SAFE_UPDATES = 1;

-- Breaking out Address into Individual Columns (Address, City, State)
-- there are two ways to do so : using substring => we will need the functions locate and length 
-- the second way is using parseName but with MSSQL not MYSQL
Select PropertyAddress
From owners2
order by ParcelID;

SELECT
SUBSTRING(PropertyAddress, 1, LOCATE(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, locate(',', PropertyAddress) + 1 , LENGTH(PropertyAddress)) as city
From owners2;
-- now let's add the columns city and adress to our table :
ALTER TABLE owners2
Add PropertySplitAddress varchar(255);
SET SQL_SAFE_UPDATES = 0;
Update owners2
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, locate(',', PropertyAddress) -1 );
SET SQL_SAFE_UPDATES = 1;

-----
ALTER TABLE owners2
Add city varchar(255);
SET SQL_SAFE_UPDATES = 0;
Update owners2
SET city = SUBSTRING(PropertyAddress, locate(',', PropertyAddress) + 1 , LENGTH(PropertyAddress));
SET SQL_SAFE_UPDATES = 1;
--------- 
-- lets check 
select * from owners2;

-- let's do the same thing with OwnerAddress
Select OwnerAddress
From owners2;
SELECT
SUBSTRING_INDEX(OwnerAddress,',', 1 ) as Address1 ,
SUBSTRING_INDEX(SUBSTRING_INDEX(OwnerAddress, ',', 2), ',', -1) as Address2 ,
SUBSTRING_INDEX(SUBSTRING_INDEX(OwnerAddress, ',', 3), ',', -1) as Address3 

From owners2;
-----
ALTER TABLE owners2
Add  OwnerSplitAddress varchar(255);
SET SQL_SAFE_UPDATES = 0;
Update owners2
SET  OwnerSplitAddress = SUBSTRING_INDEX(OwnerAddress,',', 1 ) ;
SET SQL_SAFE_UPDATES = 1;
--------- 
-----
ALTER TABLE owners2
Add  OwnerSplitCity varchar(255);
SET SQL_SAFE_UPDATES = 0;
Update owners2
SET  OwnerSplitCity = SUBSTRING_INDEX(SUBSTRING_INDEX(OwnerAddress, ',', 2), ',', -1) ;
SET SQL_SAFE_UPDATES = 1;
--------- 
-----
ALTER TABLE owners2
Add  OwnerSplitState varchar(255);
SET SQL_SAFE_UPDATES = 0;
Update owners2
SET  OwnerSplitState = SUBSTRING_INDEX(SUBSTRING_INDEX(OwnerAddress, ',', 3), ',', -1) ;
SET SQL_SAFE_UPDATES = 1;
--------- 
-- let's modify the y to yes and the N to No in the soldAsVacant field :
select SoldAsVacant from owners2;
Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From owners2
Group by SoldAsVacant
order by 2;
-- ow let's do it with the case query
Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
from owners2;

SET SQL_SAFE_UPDATES = 0;
Update owners2
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END;
SET SQL_SAFE_UPDATES = 1;

-- removing duplicates ! it's not good to delete them from database , maybe create a temp table and place them there
-- but now since i'm practicing let's remove them
WITH RowNumCTE AS(
select *,
row_number() over (
PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From owners2
-- order by ParcelID
)
select * from RowNumCTE where row_num<>1; -- we 're lucky we dont have duplicates otherwise we'll see 2,3,...
-- if we had them we would simply write delete from RowNumCTE where row num >1 ; 
